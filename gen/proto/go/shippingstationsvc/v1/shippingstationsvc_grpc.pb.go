//
// Copyright 2021 Alessandro De Blasis <alex@deblasis.net>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shippingstationsvc_v1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingStationServiceClient is the client API for ShippingStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingStationServiceClient interface {
	RequestLanding(ctx context.Context, in *RequestLandingRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Landing(ctx context.Context, in *LandingRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type shippingStationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingStationServiceClient(cc grpc.ClientConnInterface) ShippingStationServiceClient {
	return &shippingStationServiceClient{cc}
}

func (c *shippingStationServiceClient) RequestLanding(ctx context.Context, in *RequestLandingRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/deblasis.v1.ShippingStationService/RequestLanding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingStationServiceClient) Landing(ctx context.Context, in *LandingRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/deblasis.v1.ShippingStationService/Landing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingStationServiceServer is the server API for ShippingStationService service.
// All implementations must embed UnimplementedShippingStationServiceServer
// for forward compatibility
type ShippingStationServiceServer interface {
	RequestLanding(context.Context, *RequestLandingRequest) (*httpbody.HttpBody, error)
	Landing(context.Context, *LandingRequest) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedShippingStationServiceServer()
}

// UnimplementedShippingStationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShippingStationServiceServer struct {
}

func (UnimplementedShippingStationServiceServer) RequestLanding(context.Context, *RequestLandingRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLanding not implemented")
}
func (UnimplementedShippingStationServiceServer) Landing(context.Context, *LandingRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Landing not implemented")
}
func (UnimplementedShippingStationServiceServer) mustEmbedUnimplementedShippingStationServiceServer() {
}

// UnsafeShippingStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingStationServiceServer will
// result in compilation errors.
type UnsafeShippingStationServiceServer interface {
	mustEmbedUnimplementedShippingStationServiceServer()
}

func RegisterShippingStationServiceServer(s grpc.ServiceRegistrar, srv ShippingStationServiceServer) {
	s.RegisterService(&ShippingStationService_ServiceDesc, srv)
}

func _ShippingStationService_RequestLanding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLandingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServiceServer).RequestLanding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.v1.ShippingStationService/RequestLanding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServiceServer).RequestLanding(ctx, req.(*RequestLandingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingStationService_Landing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingStationServiceServer).Landing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.v1.ShippingStationService/Landing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingStationServiceServer).Landing(ctx, req.(*LandingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingStationService_ServiceDesc is the grpc.ServiceDesc for ShippingStationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingStationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deblasis.v1.ShippingStationService",
	HandlerType: (*ShippingStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestLanding",
			Handler:    _ShippingStationService_RequestLanding_Handler,
		},
		{
			MethodName: "Landing",
			Handler:    _ShippingStationService_Landing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shippingstationsvc/v1/shippingstationsvc.proto",
}
