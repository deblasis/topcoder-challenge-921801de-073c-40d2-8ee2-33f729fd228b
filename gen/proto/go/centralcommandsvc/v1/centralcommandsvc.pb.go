// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: centralcommandsvc/v1/centralcommandsvc.proto

package centralcommandsvc_v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ship_Status int32

const (
	Ship_STATUS_UNSPECIFIED Ship_Status = 0
	Ship_STATUS_INFLIGHT    Ship_Status = 1
	Ship_STATUS_DOCKED      Ship_Status = 2
)

var Ship_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_INFLIGHT",
	2: "STATUS_DOCKED",
}

var Ship_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_INFLIGHT":    1,
	"STATUS_DOCKED":      2,
}

func (x Ship_Status) String() string {
	return proto.EnumName(Ship_Status_name, int32(x))
}

func (Ship_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{2, 0}
}

type Dock struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StationId            string   `protobuf:"bytes,2,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
	NumDockingPorts      int64    `protobuf:"varint,3,opt,name=num_docking_ports,json=numDockingPorts,proto3" json:"num_docking_ports,omitempty"`
	Occupied             int64    `protobuf:"varint,4,opt,name=occupied,proto3" json:"occupied,omitempty"`
	Weight               float32  `protobuf:"fixed32,5,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dock) Reset()         { *m = Dock{} }
func (m *Dock) String() string { return proto.CompactTextString(m) }
func (*Dock) ProtoMessage()    {}
func (*Dock) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{0}
}
func (m *Dock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dock.Merge(m, src)
}
func (m *Dock) XXX_Size() int {
	return m.Size()
}
func (m *Dock) XXX_DiscardUnknown() {
	xxx_messageInfo_Dock.DiscardUnknown(m)
}

var xxx_messageInfo_Dock proto.InternalMessageInfo

func (m *Dock) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Dock) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *Dock) GetNumDockingPorts() int64 {
	if m != nil {
		return m.NumDockingPorts
	}
	return 0
}

func (m *Dock) GetOccupied() int64 {
	if m != nil {
		return m.Occupied
	}
	return 0
}

func (m *Dock) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type Station struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Capacity             float32  `protobuf:"fixed32,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCapacity         float32  `protobuf:"fixed32,3,opt,name=used_capacity,json=usedCapacity,proto3" json:"used_capacity,omitempty"`
	Docks                []*Dock  `protobuf:"bytes,4,rep,name=docks,proto3" json:"docks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Station) Reset()         { *m = Station{} }
func (m *Station) String() string { return proto.CompactTextString(m) }
func (*Station) ProtoMessage()    {}
func (*Station) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{1}
}
func (m *Station) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Station) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Station.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Station) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Station.Merge(m, src)
}
func (m *Station) XXX_Size() int {
	return m.Size()
}
func (m *Station) XXX_DiscardUnknown() {
	xxx_messageInfo_Station.DiscardUnknown(m)
}

var xxx_messageInfo_Station proto.InternalMessageInfo

func (m *Station) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Station) GetCapacity() float32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Station) GetUsedCapacity() float32 {
	if m != nil {
		return m.UsedCapacity
	}
	return 0
}

func (m *Station) GetDocks() []*Dock {
	if m != nil {
		return m.Docks
	}
	return nil
}

type Ship struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//@gotags: model:"-"
	Status               Ship_Status `protobuf:"varint,2,opt,name=status,proto3,enum=centralcommandsvc.v1.Ship_Status" json:"status,omitempty" model:"-"`
	Weight               float32     `protobuf:"fixed32,3,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Ship) Reset()         { *m = Ship{} }
func (m *Ship) String() string { return proto.CompactTextString(m) }
func (*Ship) ProtoMessage()    {}
func (*Ship) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{2}
}
func (m *Ship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ship.Merge(m, src)
}
func (m *Ship) XXX_Size() int {
	return m.Size()
}
func (m *Ship) XXX_DiscardUnknown() {
	xxx_messageInfo_Ship.DiscardUnknown(m)
}

var xxx_messageInfo_Ship proto.InternalMessageInfo

func (m *Ship) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ship) GetStatus() Ship_Status {
	if m != nil {
		return m.Status
	}
	return Ship_STATUS_UNSPECIFIED
}

func (m *Ship) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type RegisterStationRequest struct {
	Station              *Station `protobuf:"bytes,1,opt,name=station,proto3" json:"station,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterStationRequest) Reset()         { *m = RegisterStationRequest{} }
func (m *RegisterStationRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterStationRequest) ProtoMessage()    {}
func (*RegisterStationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{3}
}
func (m *RegisterStationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterStationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterStationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterStationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterStationRequest.Merge(m, src)
}
func (m *RegisterStationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterStationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterStationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterStationRequest proto.InternalMessageInfo

func (m *RegisterStationRequest) GetStation() *Station {
	if m != nil {
		return m.Station
	}
	return nil
}

type RegisterStationResponse struct {
	Station              *Station `protobuf:"bytes,1,opt,name=station,proto3" json:"station,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterStationResponse) Reset()         { *m = RegisterStationResponse{} }
func (m *RegisterStationResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterStationResponse) ProtoMessage()    {}
func (*RegisterStationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{4}
}
func (m *RegisterStationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterStationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterStationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterStationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterStationResponse.Merge(m, src)
}
func (m *RegisterStationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterStationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterStationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterStationResponse proto.InternalMessageInfo

func (m *RegisterStationResponse) GetStation() *Station {
	if m != nil {
		return m.Station
	}
	return nil
}

func (m *RegisterStationResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RegisterShipRequest struct {
	Ship                 *Ship    `protobuf:"bytes,1,opt,name=ship,proto3" json:"ship,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterShipRequest) Reset()         { *m = RegisterShipRequest{} }
func (m *RegisterShipRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterShipRequest) ProtoMessage()    {}
func (*RegisterShipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{5}
}
func (m *RegisterShipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterShipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterShipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterShipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterShipRequest.Merge(m, src)
}
func (m *RegisterShipRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterShipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterShipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterShipRequest proto.InternalMessageInfo

func (m *RegisterShipRequest) GetShip() *Ship {
	if m != nil {
		return m.Ship
	}
	return nil
}

type RegisterShipResponse struct {
	Ship                 *Ship    `protobuf:"bytes,1,opt,name=ship,proto3" json:"ship,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterShipResponse) Reset()         { *m = RegisterShipResponse{} }
func (m *RegisterShipResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterShipResponse) ProtoMessage()    {}
func (*RegisterShipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{6}
}
func (m *RegisterShipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterShipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterShipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterShipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterShipResponse.Merge(m, src)
}
func (m *RegisterShipResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterShipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterShipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterShipResponse proto.InternalMessageInfo

func (m *RegisterShipResponse) GetShip() *Ship {
	if m != nil {
		return m.Ship
	}
	return nil
}

func (m *RegisterShipResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetAllShipsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllShipsRequest) Reset()         { *m = GetAllShipsRequest{} }
func (m *GetAllShipsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllShipsRequest) ProtoMessage()    {}
func (*GetAllShipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{7}
}
func (m *GetAllShipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllShipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllShipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllShipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShipsRequest.Merge(m, src)
}
func (m *GetAllShipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllShipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShipsRequest proto.InternalMessageInfo

type GetAllShipsResponse struct {
	Ships                []*Ship  `protobuf:"bytes,1,rep,name=ships,proto3" json:"ships,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllShipsResponse) Reset()         { *m = GetAllShipsResponse{} }
func (m *GetAllShipsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllShipsResponse) ProtoMessage()    {}
func (*GetAllShipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{8}
}
func (m *GetAllShipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllShipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllShipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllShipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShipsResponse.Merge(m, src)
}
func (m *GetAllShipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllShipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShipsResponse proto.InternalMessageInfo

func (m *GetAllShipsResponse) GetShips() []*Ship {
	if m != nil {
		return m.Ships
	}
	return nil
}

func (m *GetAllShipsResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetAllStationsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllStationsRequest) Reset()         { *m = GetAllStationsRequest{} }
func (m *GetAllStationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllStationsRequest) ProtoMessage()    {}
func (*GetAllStationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{9}
}
func (m *GetAllStationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllStationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllStationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllStationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllStationsRequest.Merge(m, src)
}
func (m *GetAllStationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllStationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllStationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllStationsRequest proto.InternalMessageInfo

type GetAllStationsResponse struct {
	Stations             []*Station `protobuf:"bytes,1,rep,name=stations,proto3" json:"stations,omitempty"`
	Error                string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetAllStationsResponse) Reset()         { *m = GetAllStationsResponse{} }
func (m *GetAllStationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllStationsResponse) ProtoMessage()    {}
func (*GetAllStationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{10}
}
func (m *GetAllStationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllStationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllStationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllStationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllStationsResponse.Merge(m, src)
}
func (m *GetAllStationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllStationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllStationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllStationsResponse proto.InternalMessageInfo

func (m *GetAllStationsResponse) GetStations() []*Station {
	if m != nil {
		return m.Stations
	}
	return nil
}

func (m *GetAllStationsResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ServiceStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatusRequest) Reset()         { *m = ServiceStatusRequest{} }
func (m *ServiceStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceStatusRequest) ProtoMessage()    {}
func (*ServiceStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{11}
}
func (m *ServiceStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatusRequest.Merge(m, src)
}
func (m *ServiceStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatusRequest proto.InternalMessageInfo

type ServiceStatusResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatusResponse) Reset()         { *m = ServiceStatusResponse{} }
func (m *ServiceStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceStatusResponse) ProtoMessage()    {}
func (*ServiceStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0de7bca4f52eeafa, []int{12}
}
func (m *ServiceStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatusResponse.Merge(m, src)
}
func (m *ServiceStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatusResponse proto.InternalMessageInfo

func (m *ServiceStatusResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ServiceStatusResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterEnum("centralcommandsvc.v1.Ship_Status", Ship_Status_name, Ship_Status_value)
	proto.RegisterType((*Dock)(nil), "centralcommandsvc.v1.Dock")
	proto.RegisterType((*Station)(nil), "centralcommandsvc.v1.Station")
	proto.RegisterType((*Ship)(nil), "centralcommandsvc.v1.Ship")
	proto.RegisterType((*RegisterStationRequest)(nil), "centralcommandsvc.v1.RegisterStationRequest")
	proto.RegisterType((*RegisterStationResponse)(nil), "centralcommandsvc.v1.RegisterStationResponse")
	proto.RegisterType((*RegisterShipRequest)(nil), "centralcommandsvc.v1.RegisterShipRequest")
	proto.RegisterType((*RegisterShipResponse)(nil), "centralcommandsvc.v1.RegisterShipResponse")
	proto.RegisterType((*GetAllShipsRequest)(nil), "centralcommandsvc.v1.GetAllShipsRequest")
	proto.RegisterType((*GetAllShipsResponse)(nil), "centralcommandsvc.v1.GetAllShipsResponse")
	proto.RegisterType((*GetAllStationsRequest)(nil), "centralcommandsvc.v1.GetAllStationsRequest")
	proto.RegisterType((*GetAllStationsResponse)(nil), "centralcommandsvc.v1.GetAllStationsResponse")
	proto.RegisterType((*ServiceStatusRequest)(nil), "centralcommandsvc.v1.ServiceStatusRequest")
	proto.RegisterType((*ServiceStatusResponse)(nil), "centralcommandsvc.v1.ServiceStatusResponse")
}

func init() {
	proto.RegisterFile("centralcommandsvc/v1/centralcommandsvc.proto", fileDescriptor_0de7bca4f52eeafa)
}

var fileDescriptor_0de7bca4f52eeafa = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0xf9, 0x03, 0x2e, 0x7f, 0x61, 0x08, 0x21, 0xb2, 0x44, 0x94, 0xcf, 0xdf, 0x26, 0xfc,
	0x25, 0x24, 0xdf, 0xe2, 0x13, 0xaa, 0xba, 0xa0, 0x49, 0x80, 0xa8, 0x15, 0xa5, 0x36, 0x6c, 0xaa,
	0x56, 0x96, 0x19, 0x0f, 0xc9, 0x94, 0xc4, 0x63, 0x3c, 0x4e, 0xaa, 0xbe, 0x43, 0xb7, 0x95, 0xfa,
	0x1e, 0xbc, 0x44, 0x97, 0x7d, 0x84, 0x8a, 0xbe, 0x48, 0x65, 0x7b, 0xec, 0x12, 0x9c, 0x40, 0xda,
	0x9d, 0xe7, 0xcc, 0xb9, 0xe7, 0x9c, 0x7b, 0x7d, 0x2d, 0xc3, 0x2e, 0x26, 0x96, 0xeb, 0x18, 0x3d,
	0xcc, 0xfa, 0x7d, 0xc3, 0x32, 0xf9, 0x10, 0x57, 0x87, 0xb5, 0x6a, 0x0c, 0xac, 0xd8, 0x0e, 0x73,
	0x19, 0xca, 0xc5, 0x2f, 0x86, 0x35, 0xe5, 0x8b, 0x04, 0xa9, 0x26, 0xc3, 0xd7, 0x68, 0x19, 0x12,
	0xd4, 0x2c, 0x48, 0x25, 0xa9, 0x3c, 0xaf, 0x26, 0xa8, 0x89, 0x36, 0x01, 0xb8, 0x6b, 0xb8, 0x94,
	0x59, 0x3a, 0x35, 0x0b, 0x09, 0x1f, 0x9f, 0x17, 0x48, 0xdb, 0x44, 0xdb, 0xb0, 0x6a, 0x0d, 0xfa,
	0xba, 0xc9, 0xf0, 0x35, 0xb5, 0x3a, 0xba, 0xcd, 0x1c, 0x97, 0x17, 0x92, 0x25, 0xa9, 0x9c, 0x54,
	0x57, 0xac, 0x41, 0xbf, 0x19, 0xe0, 0x67, 0x1e, 0x8c, 0x64, 0x98, 0x63, 0x18, 0x0f, 0x6c, 0x4a,
	0xcc, 0x42, 0xca, 0xa7, 0x44, 0x67, 0x94, 0x87, 0xcc, 0x47, 0x42, 0x3b, 0x5d, 0xb7, 0x90, 0x2e,
	0x49, 0xe5, 0x84, 0x2a, 0x4e, 0xca, 0x67, 0x09, 0x66, 0xb5, 0xc0, 0x2d, 0x16, 0x4d, 0x86, 0x39,
	0x6c, 0xd8, 0x06, 0xa6, 0xee, 0x27, 0x3f, 0x58, 0x42, 0x8d, 0xce, 0xe8, 0x5f, 0x58, 0x1a, 0x70,
	0x62, 0xea, 0x11, 0x21, 0xe9, 0x13, 0x16, 0x3d, 0xb0, 0x11, 0x92, 0xf6, 0x21, 0xed, 0x05, 0xe7,
	0x85, 0x54, 0x29, 0x59, 0x5e, 0xa8, 0xcb, 0x95, 0x71, 0xa3, 0xa9, 0x78, 0x3d, 0xa8, 0x01, 0x51,
	0xb9, 0x95, 0x20, 0xa5, 0x75, 0xa9, 0x1d, 0xcb, 0x72, 0x00, 0x19, 0x6f, 0x28, 0x03, 0xee, 0x27,
	0x59, 0xae, 0xff, 0x33, 0x5e, 0xcb, 0xab, 0xad, 0x68, 0x3e, 0x51, 0x15, 0x05, 0xf7, 0x5a, 0x4f,
	0x8e, 0xb4, 0x7e, 0x02, 0x19, 0x2d, 0x64, 0x20, 0xed, 0xfc, 0xf0, 0xfc, 0x42, 0xd3, 0x2f, 0x4e,
	0xb5, 0xb3, 0x56, 0xa3, 0x7d, 0xd4, 0x6e, 0x35, 0xb3, 0x33, 0x68, 0x0d, 0x56, 0x04, 0xde, 0x3e,
	0x3d, 0x7a, 0xd5, 0x3e, 0x3e, 0x39, 0xcf, 0x4a, 0x68, 0x15, 0x96, 0x04, 0xd8, 0x7c, 0xdd, 0x78,
	0xd9, 0x6a, 0x66, 0x13, 0xca, 0x1b, 0xc8, 0xab, 0xa4, 0x43, 0xb9, 0x4b, 0x1c, 0x31, 0x4b, 0x95,
	0xdc, 0x0c, 0x08, 0x77, 0xd1, 0xff, 0x30, 0x2b, 0xde, 0xa5, 0xdf, 0xcb, 0x42, 0x7d, 0x73, 0x42,
	0x6e, 0x51, 0x16, 0xb2, 0x95, 0x2e, 0x6c, 0xc4, 0x24, 0xb9, 0xcd, 0x2c, 0x4e, 0xfe, 0x5a, 0x13,
	0xe5, 0x20, 0x4d, 0x1c, 0x87, 0x39, 0x62, 0xcb, 0x82, 0x83, 0xd2, 0x82, 0xb5, 0xc8, 0xa9, 0x4b,
	0xed, 0x30, 0x79, 0x05, 0x52, 0xbc, 0x4b, 0x6d, 0x61, 0x21, 0x4f, 0x1e, 0xb7, 0xea, 0xf3, 0x94,
	0x77, 0x90, 0x1b, 0x95, 0x11, 0x69, 0xff, 0x50, 0x67, 0x42, 0xc8, 0x1c, 0xa0, 0x63, 0xe2, 0x1e,
	0xf6, 0x7a, 0x1e, 0x93, 0x8b, 0x8c, 0xca, 0x7b, 0x58, 0x1b, 0x41, 0x85, 0xe5, 0x3e, 0xa4, 0x3d,
	0x29, 0x5e, 0x90, 0x1e, 0x5b, 0x3b, 0xdf, 0x33, 0x20, 0x4e, 0x30, 0xdd, 0x80, 0x75, 0x21, 0x1f,
	0x0c, 0x30, 0xf2, 0xa5, 0x90, 0x7f, 0x78, 0x21, 0xac, 0x0f, 0x60, 0x4e, 0x4c, 0x3b, 0x74, 0x7f,
	0xe2, 0xe5, 0x44, 0xf4, 0x09, 0x19, 0xf2, 0x90, 0xd3, 0x88, 0x33, 0xa4, 0x98, 0x88, 0xad, 0x16,
	0x11, 0x9e, 0xc3, 0xfa, 0x03, 0x5c, 0x24, 0x40, 0x90, 0xc2, 0xcc, 0x24, 0xfe, 0xbc, 0x93, 0xaa,
	0xff, 0x8c, 0xb2, 0x90, 0x24, 0x4e, 0x28, 0xec, 0x3d, 0xd6, 0x6f, 0x53, 0xb0, 0xde, 0x08, 0x72,
	0x35, 0x82, 0x5c, 0x42, 0x0d, 0x7d, 0x80, 0xa5, 0x11, 0x61, 0xb4, 0x3d, 0xa1, 0x81, 0x31, 0xa9,
	0xe4, 0x9d, 0xa9, 0xb8, 0x41, 0x52, 0x65, 0x06, 0xd9, 0xb0, 0xf2, 0x60, 0xc9, 0xd1, 0xee, 0x78,
	0x85, 0xf1, 0x9f, 0x97, 0xbc, 0x37, 0x25, 0x3b, 0x72, 0xec, 0xc0, 0xe2, 0xfd, 0x2d, 0x45, 0x5b,
	0x4f, 0x08, 0xfc, 0xfe, 0x20, 0xe4, 0xed, 0x69, 0xa8, 0x91, 0x91, 0x09, 0x0b, 0xf7, 0x56, 0x13,
	0x95, 0xc7, 0x17, 0xc7, 0x77, 0x5a, 0xde, 0x9a, 0x82, 0x19, 0xb9, 0xf4, 0x61, 0x79, 0x74, 0x11,
	0xd1, 0xce, 0xa3, 0xe5, 0xa3, 0x7b, 0x2c, 0xef, 0x4e, 0x47, 0x0e, 0xed, 0x5e, 0xdc, 0x7c, 0xbb,
	0x2b, 0x4a, 0xdf, 0xef, 0x8a, 0xd2, 0x8f, 0xbb, 0xa2, 0xf4, 0xf5, 0x67, 0x71, 0xe6, 0xad, 0x6e,
	0x92, 0xcb, 0x9e, 0xc1, 0x29, 0xaf, 0x58, 0xc4, 0xad, 0x72, 0xdb, 0xc0, 0x64, 0xcf, 0x75, 0x8c,
	0xab, 0x2b, 0x8a, 0xf7, 0x30, 0xb3, 0x5c, 0x87, 0xf5, 0xaa, 0x1d, 0x62, 0x55, 0xfd, 0x5f, 0x63,
	0xb5, 0xc3, 0xe2, 0x7f, 0x4d, 0x71, 0x35, 0xac, 0x3d, 0x8b, 0x5d, 0xe9, 0xc3, 0xda, 0x65, 0xc6,
	0xbf, 0xfe, 0xef, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0xec, 0x4f, 0x49, 0x84, 0x07, 0x00,
	0x00,
}

func (m *Dock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weight != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Weight))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Occupied != 0 {
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(m.Occupied))
		i--
		dAtA[i] = 0x20
	}
	if m.NumDockingPorts != 0 {
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(m.NumDockingPorts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Station) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Station) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Station) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Docks) > 0 {
		for iNdEx := len(m.Docks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Docks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCentralcommandsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UsedCapacity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UsedCapacity))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Capacity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Capacity))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weight != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Weight))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Status != 0 {
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterStationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterStationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterStationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Station != nil {
		{
			size, err := m.Station.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterStationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterStationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterStationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Station != nil {
		{
			size, err := m.Station.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterShipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterShipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterShipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ship != nil {
		{
			size, err := m.Ship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterShipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterShipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterShipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ship != nil {
		{
			size, err := m.Ship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllShipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllShipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllShipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAllShipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllShipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllShipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ships) > 0 {
		for iNdEx := len(m.Ships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCentralcommandsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllStationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllStationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAllStationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllStationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stations) > 0 {
		for iNdEx := len(m.Stations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCentralcommandsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCentralcommandsvc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCentralcommandsvc(dAtA []byte, offset int, v uint64) int {
	offset -= sovCentralcommandsvc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.NumDockingPorts != 0 {
		n += 1 + sovCentralcommandsvc(uint64(m.NumDockingPorts))
	}
	if m.Occupied != 0 {
		n += 1 + sovCentralcommandsvc(uint64(m.Occupied))
	}
	if m.Weight != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Station) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.Capacity != 0 {
		n += 5
	}
	if m.UsedCapacity != 0 {
		n += 5
	}
	if len(m.Docks) > 0 {
		for _, e := range m.Docks {
			l = e.Size()
			n += 1 + l + sovCentralcommandsvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCentralcommandsvc(uint64(m.Status))
	}
	if m.Weight != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterStationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Station != nil {
		l = m.Station.Size()
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterStationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Station != nil {
		l = m.Station.Size()
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterShipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ship != nil {
		l = m.Ship.Size()
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterShipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ship != nil {
		l = m.Ship.Size()
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllShipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllShipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ships) > 0 {
		for _, e := range m.Ships {
			l = e.Size()
			n += 1 + l + sovCentralcommandsvc(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllStationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllStationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stations) > 0 {
		for _, e := range m.Stations {
			l = e.Size()
			n += 1 + l + sovCentralcommandsvc(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCentralcommandsvc(uint64(m.Code))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovCentralcommandsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCentralcommandsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCentralcommandsvc(x uint64) (n int) {
	return sovCentralcommandsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDockingPorts", wireType)
			}
			m.NumDockingPorts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDockingPorts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Occupied", wireType)
			}
			m.Occupied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Occupied |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Station) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Station: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Station: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Capacity = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCapacity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UsedCapacity = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docks = append(m.Docks, &Dock{})
			if err := m.Docks[len(m.Docks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Ship_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterStationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterStationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterStationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Station", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Station == nil {
				m.Station = &Station{}
			}
			if err := m.Station.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterStationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterStationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterStationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Station", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Station == nil {
				m.Station = &Station{}
			}
			if err := m.Station.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterShipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterShipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterShipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ship == nil {
				m.Ship = &Ship{}
			}
			if err := m.Ship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterShipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterShipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterShipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ship == nil {
				m.Ship = &Ship{}
			}
			if err := m.Ship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllShipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllShipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllShipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllShipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllShipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllShipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ships = append(m.Ships, &Ship{})
			if err := m.Ships[len(m.Ships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stations = append(m.Stations, &Station{})
			if err := m.Stations[len(m.Stations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCentralcommandsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCentralcommandsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralcommandsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCentralcommandsvc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCentralcommandsvc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCentralcommandsvc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCentralcommandsvc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCentralcommandsvc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCentralcommandsvc = fmt.Errorf("proto: unexpected end of group")
)
