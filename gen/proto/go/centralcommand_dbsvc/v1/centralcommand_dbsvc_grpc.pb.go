// The MIT License (MIT)
//
// Copyright (c) 2021 Alessandro De Blasis <alex@deblasis.net>  
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE. 
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package centralcommand_dbsvc_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentralCommandDBServiceClient is the client API for CentralCommandDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralCommandDBServiceClient interface {
	CreateShip(ctx context.Context, in *CreateShipRequest, opts ...grpc.CallOption) (*CreateShipResponse, error)
	CreateStation(ctx context.Context, in *CreateStationRequest, opts ...grpc.CallOption) (*CreateStationResponse, error)
	GetAllShips(ctx context.Context, in *GetAllShipsRequest, opts ...grpc.CallOption) (*GetAllShipsResponse, error)
	GetAllStations(ctx context.Context, in *GetAllStationsRequest, opts ...grpc.CallOption) (*GetAllStationsResponse, error)
	GetNextAvailableDockingStation(ctx context.Context, in *GetNextAvailableDockingStationRequest, opts ...grpc.CallOption) (*GetNextAvailableDockingStationResponse, error)
	LandShipToDock(ctx context.Context, in *LandShipToDockRequest, opts ...grpc.CallOption) (*LandShipToDockResponse, error)
}

type centralCommandDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralCommandDBServiceClient(cc grpc.ClientConnInterface) CentralCommandDBServiceClient {
	return &centralCommandDBServiceClient{cc}
}

func (c *centralCommandDBServiceClient) CreateShip(ctx context.Context, in *CreateShipRequest, opts ...grpc.CallOption) (*CreateShipResponse, error) {
	out := new(CreateShipResponse)
	err := c.cc.Invoke(ctx, "/deblasis.state.v1.CentralCommandDBService/CreateShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) CreateStation(ctx context.Context, in *CreateStationRequest, opts ...grpc.CallOption) (*CreateStationResponse, error) {
	out := new(CreateStationResponse)
	err := c.cc.Invoke(ctx, "/deblasis.state.v1.CentralCommandDBService/CreateStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) GetAllShips(ctx context.Context, in *GetAllShipsRequest, opts ...grpc.CallOption) (*GetAllShipsResponse, error) {
	out := new(GetAllShipsResponse)
	err := c.cc.Invoke(ctx, "/deblasis.state.v1.CentralCommandDBService/GetAllShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) GetAllStations(ctx context.Context, in *GetAllStationsRequest, opts ...grpc.CallOption) (*GetAllStationsResponse, error) {
	out := new(GetAllStationsResponse)
	err := c.cc.Invoke(ctx, "/deblasis.state.v1.CentralCommandDBService/GetAllStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) GetNextAvailableDockingStation(ctx context.Context, in *GetNextAvailableDockingStationRequest, opts ...grpc.CallOption) (*GetNextAvailableDockingStationResponse, error) {
	out := new(GetNextAvailableDockingStationResponse)
	err := c.cc.Invoke(ctx, "/deblasis.state.v1.CentralCommandDBService/GetNextAvailableDockingStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) LandShipToDock(ctx context.Context, in *LandShipToDockRequest, opts ...grpc.CallOption) (*LandShipToDockResponse, error) {
	out := new(LandShipToDockResponse)
	err := c.cc.Invoke(ctx, "/deblasis.state.v1.CentralCommandDBService/LandShipToDock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralCommandDBServiceServer is the server API for CentralCommandDBService service.
// All implementations must embed UnimplementedCentralCommandDBServiceServer
// for forward compatibility
type CentralCommandDBServiceServer interface {
	CreateShip(context.Context, *CreateShipRequest) (*CreateShipResponse, error)
	CreateStation(context.Context, *CreateStationRequest) (*CreateStationResponse, error)
	GetAllShips(context.Context, *GetAllShipsRequest) (*GetAllShipsResponse, error)
	GetAllStations(context.Context, *GetAllStationsRequest) (*GetAllStationsResponse, error)
	GetNextAvailableDockingStation(context.Context, *GetNextAvailableDockingStationRequest) (*GetNextAvailableDockingStationResponse, error)
	LandShipToDock(context.Context, *LandShipToDockRequest) (*LandShipToDockResponse, error)
	mustEmbedUnimplementedCentralCommandDBServiceServer()
}

// UnimplementedCentralCommandDBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCentralCommandDBServiceServer struct {
}

func (UnimplementedCentralCommandDBServiceServer) CreateShip(context.Context, *CreateShipRequest) (*CreateShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShip not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) CreateStation(context.Context, *CreateStationRequest) (*CreateStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStation not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) GetAllShips(context.Context, *GetAllShipsRequest) (*GetAllShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShips not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) GetAllStations(context.Context, *GetAllStationsRequest) (*GetAllStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStations not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) GetNextAvailableDockingStation(context.Context, *GetNextAvailableDockingStationRequest) (*GetNextAvailableDockingStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextAvailableDockingStation not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) LandShipToDock(context.Context, *LandShipToDockRequest) (*LandShipToDockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandShipToDock not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) mustEmbedUnimplementedCentralCommandDBServiceServer() {
}

// UnsafeCentralCommandDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralCommandDBServiceServer will
// result in compilation errors.
type UnsafeCentralCommandDBServiceServer interface {
	mustEmbedUnimplementedCentralCommandDBServiceServer()
}

func RegisterCentralCommandDBServiceServer(s grpc.ServiceRegistrar, srv CentralCommandDBServiceServer) {
	s.RegisterService(&CentralCommandDBService_ServiceDesc, srv)
}

func _CentralCommandDBService_CreateShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).CreateShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.state.v1.CentralCommandDBService/CreateShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).CreateShip(ctx, req.(*CreateShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_CreateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).CreateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.state.v1.CentralCommandDBService/CreateStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).CreateStation(ctx, req.(*CreateStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_GetAllShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).GetAllShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.state.v1.CentralCommandDBService/GetAllShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).GetAllShips(ctx, req.(*GetAllShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_GetAllStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).GetAllStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.state.v1.CentralCommandDBService/GetAllStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).GetAllStations(ctx, req.(*GetAllStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_GetNextAvailableDockingStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextAvailableDockingStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).GetNextAvailableDockingStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.state.v1.CentralCommandDBService/GetNextAvailableDockingStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).GetNextAvailableDockingStation(ctx, req.(*GetNextAvailableDockingStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_LandShipToDock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandShipToDockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).LandShipToDock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deblasis.state.v1.CentralCommandDBService/LandShipToDock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).LandShipToDock(ctx, req.(*LandShipToDockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CentralCommandDBService_ServiceDesc is the grpc.ServiceDesc for CentralCommandDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralCommandDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deblasis.state.v1.CentralCommandDBService",
	HandlerType: (*CentralCommandDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShip",
			Handler:    _CentralCommandDBService_CreateShip_Handler,
		},
		{
			MethodName: "CreateStation",
			Handler:    _CentralCommandDBService_CreateStation_Handler,
		},
		{
			MethodName: "GetAllShips",
			Handler:    _CentralCommandDBService_GetAllShips_Handler,
		},
		{
			MethodName: "GetAllStations",
			Handler:    _CentralCommandDBService_GetAllStations_Handler,
		},
		{
			MethodName: "GetNextAvailableDockingStation",
			Handler:    _CentralCommandDBService_GetNextAvailableDockingStation_Handler,
		},
		{
			MethodName: "LandShipToDock",
			Handler:    _CentralCommandDBService_LandShipToDock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "centralcommand_dbsvc/v1/centralcommand_dbsvc.proto",
}
