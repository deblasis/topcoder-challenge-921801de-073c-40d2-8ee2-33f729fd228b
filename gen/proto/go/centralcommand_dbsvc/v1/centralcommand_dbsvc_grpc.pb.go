// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package centralcommand_dbsvc_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentralCommandDBServiceClient is the client API for CentralCommandDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralCommandDBServiceClient interface {
	ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusResponse, error)
	CreateShip(ctx context.Context, in *CreateShipRequest, opts ...grpc.CallOption) (*CreateShipResponse, error)
	GetAllShips(ctx context.Context, in *GetAllShipsRequest, opts ...grpc.CallOption) (*GetAllShipsResponse, error)
	CreateStation(ctx context.Context, in *CreateStationRequest, opts ...grpc.CallOption) (*CreateStationResponse, error)
	GetAllStations(ctx context.Context, in *GetAllStationsRequest, opts ...grpc.CallOption) (*GetAllStationsResponse, error)
}

type centralCommandDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralCommandDBServiceClient(cc grpc.ClientConnInterface) CentralCommandDBServiceClient {
	return &centralCommandDBServiceClient{cc}
}

func (c *centralCommandDBServiceClient) ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusResponse, error) {
	out := new(ServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/centralcommand_dbsvc.v1.CentralCommandDBService/ServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) CreateShip(ctx context.Context, in *CreateShipRequest, opts ...grpc.CallOption) (*CreateShipResponse, error) {
	out := new(CreateShipResponse)
	err := c.cc.Invoke(ctx, "/centralcommand_dbsvc.v1.CentralCommandDBService/CreateShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) GetAllShips(ctx context.Context, in *GetAllShipsRequest, opts ...grpc.CallOption) (*GetAllShipsResponse, error) {
	out := new(GetAllShipsResponse)
	err := c.cc.Invoke(ctx, "/centralcommand_dbsvc.v1.CentralCommandDBService/GetAllShips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) CreateStation(ctx context.Context, in *CreateStationRequest, opts ...grpc.CallOption) (*CreateStationResponse, error) {
	out := new(CreateStationResponse)
	err := c.cc.Invoke(ctx, "/centralcommand_dbsvc.v1.CentralCommandDBService/CreateStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralCommandDBServiceClient) GetAllStations(ctx context.Context, in *GetAllStationsRequest, opts ...grpc.CallOption) (*GetAllStationsResponse, error) {
	out := new(GetAllStationsResponse)
	err := c.cc.Invoke(ctx, "/centralcommand_dbsvc.v1.CentralCommandDBService/GetAllStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralCommandDBServiceServer is the server API for CentralCommandDBService service.
// All implementations should embed UnimplementedCentralCommandDBServiceServer
// for forward compatibility
type CentralCommandDBServiceServer interface {
	ServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusResponse, error)
	CreateShip(context.Context, *CreateShipRequest) (*CreateShipResponse, error)
	GetAllShips(context.Context, *GetAllShipsRequest) (*GetAllShipsResponse, error)
	CreateStation(context.Context, *CreateStationRequest) (*CreateStationResponse, error)
	GetAllStations(context.Context, *GetAllStationsRequest) (*GetAllStationsResponse, error)
}

// UnimplementedCentralCommandDBServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCentralCommandDBServiceServer struct {
}

func (UnimplementedCentralCommandDBServiceServer) ServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStatus not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) CreateShip(context.Context, *CreateShipRequest) (*CreateShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShip not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) GetAllShips(context.Context, *GetAllShipsRequest) (*GetAllShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShips not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) CreateStation(context.Context, *CreateStationRequest) (*CreateStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStation not implemented")
}
func (UnimplementedCentralCommandDBServiceServer) GetAllStations(context.Context, *GetAllStationsRequest) (*GetAllStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStations not implemented")
}

// UnsafeCentralCommandDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralCommandDBServiceServer will
// result in compilation errors.
type UnsafeCentralCommandDBServiceServer interface {
	mustEmbedUnimplementedCentralCommandDBServiceServer()
}

func RegisterCentralCommandDBServiceServer(s grpc.ServiceRegistrar, srv CentralCommandDBServiceServer) {
	s.RegisterService(&CentralCommandDBService_ServiceDesc, srv)
}

func _CentralCommandDBService_ServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).ServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centralcommand_dbsvc.v1.CentralCommandDBService/ServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).ServiceStatus(ctx, req.(*ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_CreateShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).CreateShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centralcommand_dbsvc.v1.CentralCommandDBService/CreateShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).CreateShip(ctx, req.(*CreateShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_GetAllShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).GetAllShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centralcommand_dbsvc.v1.CentralCommandDBService/GetAllShips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).GetAllShips(ctx, req.(*GetAllShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_CreateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).CreateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centralcommand_dbsvc.v1.CentralCommandDBService/CreateStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).CreateStation(ctx, req.(*CreateStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralCommandDBService_GetAllStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralCommandDBServiceServer).GetAllStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/centralcommand_dbsvc.v1.CentralCommandDBService/GetAllStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralCommandDBServiceServer).GetAllStations(ctx, req.(*GetAllStationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CentralCommandDBService_ServiceDesc is the grpc.ServiceDesc for CentralCommandDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralCommandDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "centralcommand_dbsvc.v1.CentralCommandDBService",
	HandlerType: (*CentralCommandDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceStatus",
			Handler:    _CentralCommandDBService_ServiceStatus_Handler,
		},
		{
			MethodName: "CreateShip",
			Handler:    _CentralCommandDBService_CreateShip_Handler,
		},
		{
			MethodName: "GetAllShips",
			Handler:    _CentralCommandDBService_GetAllShips_Handler,
		},
		{
			MethodName: "CreateStation",
			Handler:    _CentralCommandDBService_CreateStation_Handler,
		},
		{
			MethodName: "GetAllStations",
			Handler:    _CentralCommandDBService_GetAllStations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "centralcommand_dbsvc/v1/centralcommand_dbsvc.proto",
}
