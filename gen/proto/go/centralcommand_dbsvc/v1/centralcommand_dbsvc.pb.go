// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: centralcommand_dbsvc/v1/centralcommand_dbsvc.proto

package centralcommand_dbsvc_v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User_Role int32

const (
	User_ROLE_UNSPECIFIED User_Role = 0
	User_ROLE_SHIP        User_Role = 1
	User_ROLE_STATION     User_Role = 2
	User_ROLE_COMMAND     User_Role = 3
)

var User_Role_name = map[int32]string{
	0: "ROLE_UNSPECIFIED",
	1: "ROLE_SHIP",
	2: "ROLE_STATION",
	3: "ROLE_COMMAND",
}

var User_Role_value = map[string]int32{
	"ROLE_UNSPECIFIED": 0,
	"ROLE_SHIP":        1,
	"ROLE_STATION":     2,
	"ROLE_COMMAND":     3,
}

func (x User_Role) String() string {
	return proto.EnumName(User_Role_name, int32(x))
}

func (User_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{0, 0}
}

type Ship_Status int32

const (
	Ship_STATUS_UNSPECIFIED Ship_Status = 0
	Ship_STATUS_INFLIGHT    Ship_Status = 1
	Ship_STATUS_DOCKED      Ship_Status = 2
)

var Ship_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_INFLIGHT",
	2: "STATUS_DOCKED",
}

var Ship_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_INFLIGHT":    1,
	"STATUS_DOCKED":      2,
}

func (x Ship_Status) String() string {
	return proto.EnumName(Ship_Status_name, int32(x))
}

func (Ship_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{3, 0}
}

type User struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string    `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string    `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Role                 User_Role `protobuf:"varint,4,opt,name=role,proto3,enum=centralcommand_dbsvc.v1.User_Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetRole() User_Role {
	if m != nil {
		return m.Role
	}
	return User_ROLE_UNSPECIFIED
}

type Dock struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StationId            string   `protobuf:"bytes,2,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
	NumDockingPorts      int64    `protobuf:"varint,3,opt,name=num_docking_ports,json=numDockingPorts,proto3" json:"num_docking_ports,omitempty"`
	Occupied             int64    `protobuf:"varint,4,opt,name=occupied,proto3" json:"occupied,omitempty"`
	Weight               float32  `protobuf:"fixed32,5,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dock) Reset()         { *m = Dock{} }
func (m *Dock) String() string { return proto.CompactTextString(m) }
func (*Dock) ProtoMessage()    {}
func (*Dock) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{1}
}
func (m *Dock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dock.Merge(m, src)
}
func (m *Dock) XXX_Size() int {
	return m.Size()
}
func (m *Dock) XXX_DiscardUnknown() {
	xxx_messageInfo_Dock.DiscardUnknown(m)
}

var xxx_messageInfo_Dock proto.InternalMessageInfo

func (m *Dock) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Dock) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *Dock) GetNumDockingPorts() int64 {
	if m != nil {
		return m.NumDockingPorts
	}
	return 0
}

func (m *Dock) GetOccupied() int64 {
	if m != nil {
		return m.Occupied
	}
	return 0
}

func (m *Dock) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type Station struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Capacity             float32  `protobuf:"fixed32,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	UsedCapacity         float32  `protobuf:"fixed32,3,opt,name=used_capacity,json=usedCapacity,proto3" json:"used_capacity,omitempty"`
	Docks                []*Dock  `protobuf:"bytes,4,rep,name=docks,proto3" json:"docks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Station) Reset()         { *m = Station{} }
func (m *Station) String() string { return proto.CompactTextString(m) }
func (*Station) ProtoMessage()    {}
func (*Station) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{2}
}
func (m *Station) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Station) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Station.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Station) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Station.Merge(m, src)
}
func (m *Station) XXX_Size() int {
	return m.Size()
}
func (m *Station) XXX_DiscardUnknown() {
	xxx_messageInfo_Station.DiscardUnknown(m)
}

var xxx_messageInfo_Station proto.InternalMessageInfo

func (m *Station) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Station) GetCapacity() float32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Station) GetUsedCapacity() float32 {
	if m != nil {
		return m.UsedCapacity
	}
	return 0
}

func (m *Station) GetDocks() []*Dock {
	if m != nil {
		return m.Docks
	}
	return nil
}

type Ship struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               Ship_Status `protobuf:"varint,2,opt,name=status,proto3,enum=centralcommand_dbsvc.v1.Ship_Status" json:"status,omitempty"`
	Weight               float32     `protobuf:"fixed32,3,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Ship) Reset()         { *m = Ship{} }
func (m *Ship) String() string { return proto.CompactTextString(m) }
func (*Ship) ProtoMessage()    {}
func (*Ship) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{3}
}
func (m *Ship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ship.Merge(m, src)
}
func (m *Ship) XXX_Size() int {
	return m.Size()
}
func (m *Ship) XXX_DiscardUnknown() {
	xxx_messageInfo_Ship.DiscardUnknown(m)
}

var xxx_messageInfo_Ship proto.InternalMessageInfo

func (m *Ship) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ship) GetStatus() Ship_Status {
	if m != nil {
		return m.Status
	}
	return Ship_STATUS_UNSPECIFIED
}

func (m *Ship) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type CreateShipRequest struct {
	Ship                 *Ship    `protobuf:"bytes,1,opt,name=ship,proto3" json:"ship,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateShipRequest) Reset()         { *m = CreateShipRequest{} }
func (m *CreateShipRequest) String() string { return proto.CompactTextString(m) }
func (*CreateShipRequest) ProtoMessage()    {}
func (*CreateShipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{4}
}
func (m *CreateShipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateShipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateShipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateShipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateShipRequest.Merge(m, src)
}
func (m *CreateShipRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateShipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateShipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateShipRequest proto.InternalMessageInfo

func (m *CreateShipRequest) GetShip() *Ship {
	if m != nil {
		return m.Ship
	}
	return nil
}

type CreateShipResponse struct {
	Ship                 *Ship    `protobuf:"bytes,1,opt,name=ship,proto3" json:"ship,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateShipResponse) Reset()         { *m = CreateShipResponse{} }
func (m *CreateShipResponse) String() string { return proto.CompactTextString(m) }
func (*CreateShipResponse) ProtoMessage()    {}
func (*CreateShipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{5}
}
func (m *CreateShipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateShipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateShipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateShipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateShipResponse.Merge(m, src)
}
func (m *CreateShipResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateShipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateShipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateShipResponse proto.InternalMessageInfo

func (m *CreateShipResponse) GetShip() *Ship {
	if m != nil {
		return m.Ship
	}
	return nil
}

func (m *CreateShipResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetAllShipsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllShipsRequest) Reset()         { *m = GetAllShipsRequest{} }
func (m *GetAllShipsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllShipsRequest) ProtoMessage()    {}
func (*GetAllShipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{6}
}
func (m *GetAllShipsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllShipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllShipsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllShipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShipsRequest.Merge(m, src)
}
func (m *GetAllShipsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllShipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShipsRequest proto.InternalMessageInfo

type GetAllShipsResponse struct {
	Ships                []*Ship  `protobuf:"bytes,1,rep,name=ships,proto3" json:"ships,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllShipsResponse) Reset()         { *m = GetAllShipsResponse{} }
func (m *GetAllShipsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllShipsResponse) ProtoMessage()    {}
func (*GetAllShipsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{7}
}
func (m *GetAllShipsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllShipsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllShipsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllShipsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShipsResponse.Merge(m, src)
}
func (m *GetAllShipsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllShipsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShipsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShipsResponse proto.InternalMessageInfo

func (m *GetAllShipsResponse) GetShips() []*Ship {
	if m != nil {
		return m.Ships
	}
	return nil
}

func (m *GetAllShipsResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CreateStationRequest struct {
	Station              *Station `protobuf:"bytes,1,opt,name=station,proto3" json:"station,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStationRequest) Reset()         { *m = CreateStationRequest{} }
func (m *CreateStationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStationRequest) ProtoMessage()    {}
func (*CreateStationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{8}
}
func (m *CreateStationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStationRequest.Merge(m, src)
}
func (m *CreateStationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateStationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStationRequest proto.InternalMessageInfo

func (m *CreateStationRequest) GetStation() *Station {
	if m != nil {
		return m.Station
	}
	return nil
}

type CreateStationResponse struct {
	Station              *Station `protobuf:"bytes,1,opt,name=station,proto3" json:"station,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStationResponse) Reset()         { *m = CreateStationResponse{} }
func (m *CreateStationResponse) String() string { return proto.CompactTextString(m) }
func (*CreateStationResponse) ProtoMessage()    {}
func (*CreateStationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{9}
}
func (m *CreateStationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStationResponse.Merge(m, src)
}
func (m *CreateStationResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateStationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStationResponse proto.InternalMessageInfo

func (m *CreateStationResponse) GetStation() *Station {
	if m != nil {
		return m.Station
	}
	return nil
}

func (m *CreateStationResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetAllStationsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllStationsRequest) Reset()         { *m = GetAllStationsRequest{} }
func (m *GetAllStationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllStationsRequest) ProtoMessage()    {}
func (*GetAllStationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{10}
}
func (m *GetAllStationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllStationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllStationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllStationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllStationsRequest.Merge(m, src)
}
func (m *GetAllStationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllStationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllStationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllStationsRequest proto.InternalMessageInfo

type GetAllStationsResponse struct {
	Stations             []*Station `protobuf:"bytes,1,rep,name=stations,proto3" json:"stations,omitempty"`
	Error                string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetAllStationsResponse) Reset()         { *m = GetAllStationsResponse{} }
func (m *GetAllStationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllStationsResponse) ProtoMessage()    {}
func (*GetAllStationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{11}
}
func (m *GetAllStationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllStationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllStationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllStationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllStationsResponse.Merge(m, src)
}
func (m *GetAllStationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllStationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllStationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllStationsResponse proto.InternalMessageInfo

func (m *GetAllStationsResponse) GetStations() []*Station {
	if m != nil {
		return m.Stations
	}
	return nil
}

func (m *GetAllStationsResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ServiceStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatusRequest) Reset()         { *m = ServiceStatusRequest{} }
func (m *ServiceStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceStatusRequest) ProtoMessage()    {}
func (*ServiceStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{12}
}
func (m *ServiceStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatusRequest.Merge(m, src)
}
func (m *ServiceStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatusRequest proto.InternalMessageInfo

type ServiceStatusResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatusResponse) Reset()         { *m = ServiceStatusResponse{} }
func (m *ServiceStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceStatusResponse) ProtoMessage()    {}
func (*ServiceStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cac156747281414, []int{13}
}
func (m *ServiceStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatusResponse.Merge(m, src)
}
func (m *ServiceStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatusResponse proto.InternalMessageInfo

func (m *ServiceStatusResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ServiceStatusResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterEnum("centralcommand_dbsvc.v1.User_Role", User_Role_name, User_Role_value)
	proto.RegisterEnum("centralcommand_dbsvc.v1.Ship_Status", Ship_Status_name, Ship_Status_value)
	proto.RegisterType((*User)(nil), "centralcommand_dbsvc.v1.User")
	proto.RegisterType((*Dock)(nil), "centralcommand_dbsvc.v1.Dock")
	proto.RegisterType((*Station)(nil), "centralcommand_dbsvc.v1.Station")
	proto.RegisterType((*Ship)(nil), "centralcommand_dbsvc.v1.Ship")
	proto.RegisterType((*CreateShipRequest)(nil), "centralcommand_dbsvc.v1.CreateShipRequest")
	proto.RegisterType((*CreateShipResponse)(nil), "centralcommand_dbsvc.v1.CreateShipResponse")
	proto.RegisterType((*GetAllShipsRequest)(nil), "centralcommand_dbsvc.v1.GetAllShipsRequest")
	proto.RegisterType((*GetAllShipsResponse)(nil), "centralcommand_dbsvc.v1.GetAllShipsResponse")
	proto.RegisterType((*CreateStationRequest)(nil), "centralcommand_dbsvc.v1.CreateStationRequest")
	proto.RegisterType((*CreateStationResponse)(nil), "centralcommand_dbsvc.v1.CreateStationResponse")
	proto.RegisterType((*GetAllStationsRequest)(nil), "centralcommand_dbsvc.v1.GetAllStationsRequest")
	proto.RegisterType((*GetAllStationsResponse)(nil), "centralcommand_dbsvc.v1.GetAllStationsResponse")
	proto.RegisterType((*ServiceStatusRequest)(nil), "centralcommand_dbsvc.v1.ServiceStatusRequest")
	proto.RegisterType((*ServiceStatusResponse)(nil), "centralcommand_dbsvc.v1.ServiceStatusResponse")
}

func init() {
	proto.RegisterFile("centralcommand_dbsvc/v1/centralcommand_dbsvc.proto", fileDescriptor_2cac156747281414)
}

var fileDescriptor_2cac156747281414 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xea, 0x46,
	0x14, 0xc6, 0xd8, 0x70, 0xc3, 0xb9, 0x17, 0xae, 0x33, 0x97, 0x24, 0x08, 0x29, 0x08, 0xb9, 0x5d,
	0xa0, 0xb4, 0x31, 0x82, 0x48, 0x5d, 0xb4, 0xe9, 0x22, 0x01, 0x92, 0xa0, 0x26, 0x10, 0xd9, 0xc9,
	0xa6, 0x52, 0x45, 0x1d, 0x7b, 0x42, 0xdc, 0x18, 0x8f, 0xeb, 0x31, 0x44, 0x7d, 0x8a, 0xae, 0x2a,
	0xf5, 0x49, 0xfa, 0x0a, 0xed, 0xb2, 0xbb, 0x6e, 0xab, 0xf4, 0x45, 0x2a, 0x8f, 0xc7, 0x2e, 0x7f,
	0x4e, 0x50, 0xef, 0x8e, 0x73, 0xe6, 0x3b, 0xe7, 0xfb, 0xce, 0x37, 0x67, 0x90, 0xa1, 0x6d, 0x62,
	0x37, 0xf0, 0x0d, 0xc7, 0x24, 0x93, 0x89, 0xe1, 0x5a, 0x23, 0xeb, 0x8e, 0xce, 0xcc, 0xe6, 0xac,
	0xd5, 0x5c, 0x97, 0x57, 0x3d, 0x9f, 0x04, 0x04, 0xed, 0xad, 0x3d, 0x9b, 0xb5, 0x94, 0xbf, 0x04,
	0x90, 0x6e, 0x29, 0xf6, 0x51, 0x09, 0xb2, 0xb6, 0x55, 0x11, 0xea, 0x42, 0x43, 0xd4, 0xb2, 0xb6,
	0x85, 0xaa, 0xb0, 0x35, 0xa5, 0xd8, 0x77, 0x8d, 0x09, 0xae, 0x64, 0xeb, 0x42, 0xa3, 0xa0, 0x25,
	0x71, 0x78, 0xe6, 0x19, 0x94, 0x3e, 0x11, 0xdf, 0xaa, 0x88, 0xd1, 0x59, 0x1c, 0xa3, 0x2f, 0x40,
	0xf2, 0x89, 0x83, 0x2b, 0x52, 0x5d, 0x68, 0x94, 0xda, 0x8a, 0x9a, 0x42, 0xac, 0x86, 0xa4, 0xaa,
	0x46, 0x1c, 0xac, 0x31, 0xbc, 0x32, 0x04, 0x29, 0x8c, 0x50, 0x19, 0x64, 0x6d, 0x78, 0xd9, 0x1b,
	0xdd, 0x0e, 0xf4, 0xeb, 0x5e, 0xa7, 0x7f, 0xd6, 0xef, 0x75, 0xe5, 0x0c, 0x2a, 0x42, 0x81, 0x65,
	0xf5, 0x8b, 0xfe, 0xb5, 0x2c, 0x20, 0x19, 0xde, 0x45, 0xe1, 0xcd, 0xc9, 0x4d, 0x7f, 0x38, 0x90,
	0xb3, 0x49, 0xa6, 0x33, 0xbc, 0xba, 0x3a, 0x19, 0x74, 0x65, 0x51, 0xf9, 0x45, 0x00, 0xa9, 0x4b,
	0xcc, 0xc7, 0xb9, 0xc9, 0x0a, 0x6c, 0xb2, 0x7d, 0x00, 0x1a, 0x18, 0x81, 0x4d, 0xdc, 0x91, 0x6d,
	0xf1, 0xd9, 0x0a, 0x3c, 0xd3, 0xb7, 0xd0, 0x01, 0x6c, 0xbb, 0xd3, 0xc9, 0xc8, 0x22, 0xe6, 0xa3,
	0xed, 0x8e, 0x47, 0x1e, 0xf1, 0x03, 0xca, 0xa6, 0x14, 0xb5, 0xf7, 0xee, 0x74, 0xd2, 0x8d, 0xf2,
	0xd7, 0x61, 0x3a, 0x34, 0x82, 0x98, 0xe6, 0xd4, 0xb3, 0xb1, 0xc5, 0x06, 0x16, 0xb5, 0x24, 0x46,
	0xbb, 0x90, 0x7f, 0xc2, 0xf6, 0xf8, 0x21, 0xa8, 0xe4, 0xea, 0x42, 0x23, 0xab, 0xf1, 0x48, 0xf9,
	0x59, 0x80, 0x37, 0x7a, 0xc4, 0xb6, 0x22, 0xad, 0x0a, 0x5b, 0xa6, 0xe1, 0x19, 0xa6, 0x1d, 0xfc,
	0xc4, 0x84, 0x65, 0xb5, 0x24, 0x46, 0x9f, 0x40, 0x71, 0x4a, 0xb1, 0x35, 0x4a, 0x00, 0x22, 0x03,
	0xbc, 0x0b, 0x93, 0x9d, 0x18, 0x74, 0x04, 0xb9, 0x50, 0x38, 0xad, 0x48, 0x75, 0xb1, 0xf1, 0xb6,
	0xbd, 0x9f, 0x6a, 0x7f, 0x38, 0x86, 0x16, 0x61, 0x95, 0xdf, 0x04, 0x90, 0xf4, 0x07, 0xdb, 0x5b,
	0x91, 0x73, 0x0c, 0xf9, 0xd0, 0x97, 0x29, 0x65, 0x62, 0x4a, 0xed, 0x4f, 0x53, 0xdb, 0x85, 0xe5,
	0xaa, 0xce, 0xb0, 0x1a, 0xaf, 0x99, 0x33, 0x40, 0x5c, 0x30, 0xe0, 0x02, 0xf2, 0x7a, 0x8c, 0x40,
	0xe1, 0x0d, 0xde, 0xea, 0x4b, 0xb7, 0xfd, 0x01, 0xde, 0xf3, 0x7c, 0x7f, 0x70, 0x76, 0xd9, 0x3f,
	0xbf, 0xb8, 0x91, 0x05, 0xb4, 0x0d, 0x45, 0x9e, 0xec, 0x0e, 0x3b, 0xdf, 0xf4, 0xba, 0x72, 0x56,
	0x39, 0x83, 0xed, 0x8e, 0x8f, 0x8d, 0x00, 0x87, 0xf4, 0x1a, 0xfe, 0x71, 0x8a, 0x69, 0x80, 0x5a,
	0x20, 0xd1, 0x07, 0xdb, 0x63, 0x63, 0xbc, 0xe4, 0x00, 0xab, 0x61, 0x50, 0xe5, 0x3b, 0x40, 0xf3,
	0x7d, 0xa8, 0x47, 0x5c, 0x8a, 0xff, 0x47, 0x23, 0x54, 0x86, 0x1c, 0xf6, 0x7d, 0xe2, 0xf3, 0xad,
	0x8a, 0x02, 0xa5, 0x0c, 0xe8, 0x1c, 0x07, 0x27, 0x8e, 0x13, 0x22, 0x29, 0xd7, 0xa9, 0x7c, 0x0f,
	0x1f, 0x16, 0xb2, 0x9c, 0xf5, 0x08, 0x72, 0x61, 0x2b, 0x5a, 0x11, 0x5e, 0xb9, 0x41, 0x46, 0x1b,
	0x61, 0x53, 0x78, 0x35, 0x28, 0xf3, 0xb1, 0xa2, 0x75, 0x8b, 0x1d, 0xfa, 0x12, 0xde, 0xf0, 0x75,
	0xe7, 0xb3, 0xd5, 0xd3, 0x49, 0x78, 0x65, 0x5c, 0xa0, 0xd8, 0xb0, 0xb3, 0xd4, 0x93, 0xeb, 0xfe,
	0x88, 0xa6, 0x29, 0xf2, 0xf7, 0x60, 0x87, 0x1b, 0x14, 0xc1, 0x12, 0xe7, 0x1c, 0xd8, 0x5d, 0x3e,
	0xe0, 0x22, 0x8e, 0x61, 0x8b, 0xf7, 0x8c, 0xfd, 0x7b, 0x5d, 0x45, 0x52, 0x91, 0x22, 0x63, 0x17,
	0xca, 0x3a, 0xf6, 0x67, 0xb6, 0x89, 0xf9, 0x7e, 0x73, 0x15, 0x5f, 0xc3, 0xce, 0x52, 0x9e, 0x8b,
	0x40, 0x20, 0x99, 0xc4, 0xc2, 0xfc, 0xbf, 0x94, 0xfd, 0x46, 0x32, 0x88, 0xd8, 0x8f, 0x1b, 0x87,
	0x3f, 0xdb, 0xbf, 0x4b, 0xb0, 0xd7, 0x89, 0xa4, 0x75, 0x22, 0x69, 0xdd, 0x53, 0xde, 0x0f, 0x79,
	0x50, 0x5c, 0x68, 0x8d, 0x0e, 0xd3, 0xa7, 0x58, 0x23, 0xad, 0xaa, 0x6e, 0x0a, 0x8f, 0x14, 0x2b,
	0x19, 0x34, 0x06, 0xf8, 0xef, 0x05, 0xa0, 0x83, 0xd4, 0xfa, 0x95, 0xe7, 0x56, 0xfd, 0x6c, 0x23,
	0x6c, 0x42, 0xf4, 0x03, 0xbc, 0x9d, 0xdb, 0x7a, 0x94, 0x5e, 0xbd, 0xfa, 0x62, 0xaa, 0x9f, 0x6f,
	0x06, 0x4e, 0xb8, 0x3c, 0x28, 0x2e, 0xec, 0xea, 0x0b, 0x36, 0xae, 0x7b, 0x27, 0x2f, 0xd8, 0xb8,
	0xf6, 0x09, 0x28, 0x19, 0x44, 0xa1, 0xb4, 0xb8, 0x99, 0x48, 0x7d, 0x4d, 0xf3, 0xe2, 0x6e, 0x57,
	0x9b, 0x1b, 0xe3, 0x63, 0xd2, 0xd3, 0xa7, 0x3f, 0x9e, 0x6b, 0xc2, 0x9f, 0xcf, 0x35, 0xe1, 0xef,
	0xe7, 0x9a, 0xf0, 0xeb, 0x3f, 0xb5, 0xcc, 0xb7, 0xd8, 0xc2, 0x77, 0x8e, 0x41, 0x6d, 0xaa, 0xba,
	0x38, 0x68, 0x52, 0xcf, 0x30, 0xf1, 0x61, 0xe0, 0x1b, 0xf7, 0xf7, 0xb6, 0x79, 0x68, 0x12, 0x37,
	0xf0, 0x89, 0xd3, 0x1c, 0x63, 0xb7, 0xc9, 0xbe, 0x0d, 0x9a, 0x63, 0xb2, 0xf6, 0xcb, 0x81, 0x9f,
	0xce, 0x5a, 0x5f, 0xad, 0x3b, 0x1d, 0xcd, 0x5a, 0x77, 0x79, 0x86, 0x38, 0xfa, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x47, 0x56, 0xe6, 0x63, 0x91, 0x08, 0x00, 0x00,
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Role != 0 {
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weight != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Weight))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Occupied != 0 {
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(m.Occupied))
		i--
		dAtA[i] = 0x20
	}
	if m.NumDockingPorts != 0 {
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(m.NumDockingPorts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Station) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Station) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Station) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Docks) > 0 {
		for iNdEx := len(m.Docks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Docks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UsedCapacity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UsedCapacity))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Capacity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Capacity))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weight != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Weight))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Status != 0 {
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateShipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateShipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateShipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ship != nil {
		{
			size, err := m.Ship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateShipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateShipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateShipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ship != nil {
		{
			size, err := m.Ship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllShipsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllShipsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllShipsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAllShipsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllShipsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllShipsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ships) > 0 {
		for iNdEx := len(m.Ships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateStationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Station != nil {
		{
			size, err := m.Station.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateStationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateStationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Station != nil {
		{
			size, err := m.Station.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllStationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllStationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetAllStationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllStationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllStationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stations) > 0 {
		for iNdEx := len(m.Stations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintCentralcommandDbsvc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCentralcommandDbsvc(dAtA []byte, offset int, v uint64) int {
	offset -= sovCentralcommandDbsvc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCentralcommandDbsvc(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovCentralcommandDbsvc(uint64(m.Role))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.NumDockingPorts != 0 {
		n += 1 + sovCentralcommandDbsvc(uint64(m.NumDockingPorts))
	}
	if m.Occupied != 0 {
		n += 1 + sovCentralcommandDbsvc(uint64(m.Occupied))
	}
	if m.Weight != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Station) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.Capacity != 0 {
		n += 5
	}
	if m.UsedCapacity != 0 {
		n += 5
	}
	if len(m.Docks) > 0 {
		for _, e := range m.Docks {
			l = e.Size()
			n += 1 + l + sovCentralcommandDbsvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCentralcommandDbsvc(uint64(m.Status))
	}
	if m.Weight != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateShipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ship != nil {
		l = m.Ship.Size()
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateShipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ship != nil {
		l = m.Ship.Size()
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllShipsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllShipsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ships) > 0 {
		for _, e := range m.Ships {
			l = e.Size()
			n += 1 + l + sovCentralcommandDbsvc(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Station != nil {
		l = m.Station.Size()
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateStationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Station != nil {
		l = m.Station.Size()
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllStationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllStationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stations) > 0 {
		for _, e := range m.Stations {
			l = e.Size()
			n += 1 + l + sovCentralcommandDbsvc(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCentralcommandDbsvc(uint64(m.Code))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovCentralcommandDbsvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCentralcommandDbsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCentralcommandDbsvc(x uint64) (n int) {
	return sovCentralcommandDbsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= User_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDockingPorts", wireType)
			}
			m.NumDockingPorts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDockingPorts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Occupied", wireType)
			}
			m.Occupied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Occupied |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Station) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Station: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Station: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Capacity = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCapacity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UsedCapacity = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docks = append(m.Docks, &Dock{})
			if err := m.Docks[len(m.Docks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Ship_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Weight = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateShipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateShipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateShipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ship == nil {
				m.Ship = &Ship{}
			}
			if err := m.Ship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateShipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateShipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateShipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ship == nil {
				m.Ship = &Ship{}
			}
			if err := m.Ship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllShipsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllShipsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllShipsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllShipsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllShipsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllShipsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ships = append(m.Ships, &Ship{})
			if err := m.Ships[len(m.Ships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Station", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Station == nil {
				m.Station = &Station{}
			}
			if err := m.Station.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Station", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Station == nil {
				m.Station = &Station{}
			}
			if err := m.Station.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllStationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllStationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllStationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stations = append(m.Stations, &Station{})
			if err := m.Stations[len(m.Stations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCentralcommandDbsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCentralcommandDbsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCentralcommandDbsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCentralcommandDbsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCentralcommandDbsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCentralcommandDbsvc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCentralcommandDbsvc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCentralcommandDbsvc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCentralcommandDbsvc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCentralcommandDbsvc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCentralcommandDbsvc = fmt.Errorf("proto: unexpected end of group")
)
