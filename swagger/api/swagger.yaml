#
# Copyright 2021 Alessandro De Blasis <alex@deblasis.net>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
openapi: 3.0.1
info:
  title: "[deblasis] Space Traffic Control"
  description: "The [MCRN](https://expanse.fandom.com/wiki/Martian_Congressional_Republic_Navy)\
    \ wants to build and deploy new software to all their space stations spread throughout\
    \ the Solar System. With the exponential increase of trade between the [OPA](https://expanse.fandom.com/wiki/Outer_Planets_Alliance)\
    \ and the [Earth](https://expanse.fandom.com/wiki/Earth) the legacy systems running\
    \ on Martian space stations have been having difficulty directing and optimizing\
    \ traffic."
  termsOfService: https://www.topcoder.com/members/deblasis
  contact:
    email: alex@deblasis.net
  license:
    name: UNLICENSED
  version: 1.0.0
servers:
- url: http://spacetrafficcontrol.127.0.0.1.nip.io/v1
tags:
- name: Auth
  description: "Identify yourself, citizen"
- name: Central Command
  description: We command and control
- name: Shipping Station
  description: This is your point of contact if you are a `Ship` that needs `Station`
    services
paths:
  /user/signup:
    post:
      tags:
      - Auth
      summary: Here you can get your credentials
      description: "If you are a `Ship` without credentials, you can get new ones.\n\
        Otherwise, if you are a `Station` or `Command`, you'll need to provide your\
        \ credentials first in order to create new users with role `Station` or `Command`."
      operationId: signup
      requestBody:
        description: '`SignupRequest` object that is used to identify a user'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
        required: true
      responses:
        "200":
          description: Successfull signup
        "401":
          description: Unauthorized
      security:
      - {}
      - bearerAuth: []
      x-codegen-request-body-name: body
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login
      operationId: login
      requestBody:
        description: '`LoginRequest` object '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Successfull login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: Unauthorized
      x-codegen-request-body-name: body
  /centcom/station/register:
    post:
      tags:
      - Central Command
      summary: All Stations must register here
      description: Are you a `Station`? You need to register here first otherwise
        you won't be able to operate
      operationId: stationRegister
      requestBody:
        description: '`Station` object '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterStationRequest'
        required: true
      responses:
        "200":
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterStationResponse'
        "400":
          description: Bad Request
      security:
      - bearerAuth: []
      x-codegen-request-body-name: body
  /centcom/station/all:
    get:
      tags:
      - Central Command
      summary: List all Stations
      description: Here you can get all registered shipping `Station`s and their current
        state
      operationId: stationsList
      responses:
        "200":
          description: Stations list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationsListResponse'
        "400":
          description: Bad Request
      security:
      - bearerAuth: []
  /centcom/ship/register:
    post:
      tags:
      - Central Command
      summary: All Ships must register here
      description: Are you a `Ship`? You need to register here first otherwise you
        won't be able to operate
      operationId: shipRegister
      requestBody:
        description: '`RegisterShipRequest` object '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterShipRequest'
        required: true
      responses:
        "200":
          description: Successfully registered
        "400":
          description: Bad Request
      security:
      - bearerAuth: []
      x-codegen-request-body-name: body
  /centcom/ship/all:
    get:
      tags:
      - Central Command
      summary: List all Ships
      description: Here you can get all registered `Ship`s and their current state
      operationId: shipsList
      responses:
        "200":
          description: Ships list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShipWithStats'
                x-content-type: application/json
        "400":
          description: Bad Request
      security:
      - bearerAuth: []
  /shipping-station/request-landing:
    post:
      tags:
      - Shipping Station
      summary: Requests for landing
      description: "Are you a `Ship`? You need to request permission here if you want\
        \ to land, you will be told where to go"
      operationId: shipRequestLanding
      requestBody:
        description: Landing request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestLandingRequest'
        required: true
      responses:
        "200":
          description: Landing request instructions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad Request
      security:
      - bearerAuth: []
      x-codegen-request-body-name: body
  /shipping-station/land:
    post:
      tags:
      - Shipping Station
      summary: Land here
      description: Are you a `Ship`? You need to register here first otherwise you
        won't be able to operate
      operationId: shipLand
      requestBody:
        description: 'Land request '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LandRequest'
        required: true
      responses:
        "200":
          description: Successfully registered
          content: {}
        "400":
          description: Bad Request
          content: {}
      security:
      - bearerAuth: []
      x-codegen-request-body-name: body
components:
  schemas:
    LoginRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    SignupRequest:
      required:
      - role
      properties:
        role:
          type: string
          enum:
          - Ship
          - Station
          - Command
      allOf:
      - $ref: '#/components/schemas/LoginRequest'
      - type: object
    RegisterStationRequest:
      required:
      - capacity
      type: object
      properties:
        capacity:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float
        docks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Dock'
      allOf:
      - $ref: '#/components/schemas/BaseStation'
      - type: object
    RegisterStationResponse:
      allOf:
      - $ref: '#/components/schemas/StationWithId'
      - type: object
    StationsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/StationWithStats'
      x-schema-name: StationsListResponse
    RegisterShipRequest:
      type: object
      properties:
        weight:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float
    RequestLandingRequest:
      type: object
      properties:
        time:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: integer
    LandRequest:
      type: object
      properties:
        time:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int64
    LandCommand:
      type: object
      properties:
        command:
          type: string
          default: land
        dockingStation:
          type: string
          format: string
    WaitCommand:
      type: object
      properties:
        command:
          type: string
          default: wait
        duration:
          type: integer
          format: int64
    Dock:
      required:
      - numDockingPorts
      type: object
      properties:
        numDockingPorts:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int64
    DockWithId:
      required:
      - id
      properties:
        id:
          type: string
      allOf:
      - $ref: '#/components/schemas/Dock'
      - type: object
    DockWithStats:
      required:
      - id
      - occupied
      - weight
      properties:
        id:
          type: string
        occupied:
          type: integer
          format: int64
        weight:
          type: number
          format: float
      example:
        weight: 5.962134
        id: id
        occupied: 1
      allOf:
      - $ref: '#/components/schemas/DockWithId'
      - type: object
    BaseStation:
      required:
      - docks
      type: object
      properties:
        docks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Dock'
    StationWithId:
      required:
      - id
      properties:
        id:
          type: string
        docks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/DockWithId'
      allOf:
      - $ref: '#/components/schemas/BaseStation'
      - type: object
    StationWithStats:
      required:
      - capacity
      - docks
      - id
      - usedCapacity
      properties:
        capacity:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float
        usedCapacity:
          minimum: 0
          exclusiveMinimum: false
          type: number
          format: float
        docks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/DockWithStats'
      example:
        docks:
        - weight: 5.962134
          id: id
          occupied: 1
        - weight: 5.962134
          id: id
          occupied: 1
        usedCapacity: 0.6027456
        capacity: 0.08008282
      allOf:
      - $ref: '#/components/schemas/StationWithId'
      - type: object
    BaseShip:
      required:
      - weight
      type: object
      properties:
        weight:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float
    ShipWithStats:
      required:
      - id
      - status
      - weight
      properties:
        id:
          type: string
        status:
          type: string
          description: ship status
          enum:
          - docked
          - in-flight
        weight:
          type: number
          format: float
      example:
        weight: 0.8008282
        id: id
        status: docked
      allOf:
      - $ref: '#/components/schemas/BaseShip'
      - type: object
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        expires:
          type: integer
          format: int64
      example:
        access_token: access_token
        expires: 0
    inline_response_200:
      discriminator:
        propertyName: Command
        mapping:
          land: '#/components/schemas/LandCommand'
          wait: '#/components/schemas/WaitCommand'
      oneOf:
      - $ref: '#/components/schemas/LandCommand'
      - $ref: '#/components/schemas/WaitCommand'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
