openapi: 3.0.1
info:
  title: '[deblasis] Space Traffic Control'
  description: 'The [MCRN](https://expanse.fandom.com/wiki/Martian_Congressional_Republic_Navy) wants to build and deploy new software to all their space stations spread throughout the Solar System. With the exponential increase of trade between the [OPA](https://expanse.fandom.com/wiki/Outer_Planets_Alliance) and the [Earth](https://expanse.fandom.com/wiki/Earth) the legacy systems running on Martian space stations have been having difficulty directing and optimizing traffic.'
  termsOfService: https://www.topcoder.com/members/deblasis
  contact:
    email: alex@deblasis.net
  license:
    name: UNLICENSED
  version: 1.0.0
servers:
- url: http://spacetrafficcontrol.127.0.0.1.nip.io/v1
tags:
- name: Auth
  description: Identify yourself, citizen
- name: Central Command
  description: We command and control
- name: Shipping Station
  description: This is your point of contact if you are a `Ship` that needs `Station` services
paths:
  /user/signup:
    post:
      tags:
      - Auth
      summary: Here you can get your credentials
      description: |-
        If you are a `Ship` without credentials, you can get new ones.
        Otherwise, if you are a `Station` or `Command`, you'll need to provide your credentials first in order to create new users with role `Station` or `Command`.
      operationId: signup
      requestBody:
        description: '`SignupRequest` object that is used to identify a user'
        content:
          application/vnd.deblasis.spacetrafficcontrol-v1+/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
        required: true
      responses:
        200:
          description: Successfull signup
        401:
          description: Unauthorized
      security:
        - {}
        - bearerAuth: []
      x-codegen-request-body-name: body
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login
      operationId: login
      requestBody:
        description: '`LoginRequest` object '
        content:
          application/vnd.deblasis.spacetrafficcontrol-v1+/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        200:
          description: Successfull login
          #headers:
          #  X-Auth-Token:
          #    description: Bearer token
          #    schema:
          #      type: string
          #      format: string
          #  X-Auth-Token-Expires:
          #    description: Bearer token
          #    schema:
          #      type: string
          #      format: string     
          content:
            application/vnd.deblasis.spacetrafficcontrol-v1+/json:
              schema:          
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Unauthorized
      x-codegen-request-body-name: body
  /centcom/station/register:
    post:
      tags:
      - Central Command
      summary: All Stations must register here
      description: Are you a `Station`? You need to register here first otherwise
        you won't be able to operate
      operationId: stationRegister
      requestBody:
        description: '`Station` object '
        content:
          application/vnd.deblasis.spacetrafficcontrol-v1+/json:
            schema:
              $ref: '#/components/schemas/RegisterStationRequest'
        required: true
      responses:
        200:
          description: Successfully registered
          content:
            application/vnd.deblasis.spacetrafficcontrol-v1+/json:
              schema:
                $ref: '#/components/schemas/RegisterStationResponse'
        400:
          description: Bad Request
      security:
        - bearerAuth: []
      x-codegen-request-body-name: body
      
  /centcom/station/all:
    get:
      tags:
      - Central Command
      summary: List all Stations
      description: Here you can get all registered shipping `Station`s and their current
        state
      operationId: stationsList
      responses:
        200:
          description: Stations list
          content:
            application/vnd.deblasis.spacetrafficcontrol-v1+/json:
              schema:
                $ref: '#/components/schemas/StationsListResponse'
                
        400:
          description: Bad Request
      security:
        - bearerAuth: []      
      
  /centcom/ship/register:
    post:
      tags:
      - Central Command
      summary: All Ships must register here
      description: Are you a `Ship`? You need to register here first otherwise you
        won't be able to operate
      operationId: shipRegister
      requestBody:
        description: '`RegisterShipRequest` object '
        content:
          application/vnd.deblasis.spacetrafficcontrol-v1+/json:
            schema:
              $ref: '#/components/schemas/RegisterShipRequest'

        required: true
      responses:
        200:
          description: Successfully registered
        400:
          description: Bad Request
      security:
        - bearerAuth: []
      x-codegen-request-body-name: body
      

  /centcom/ship/all:
    get:
      tags:
      - Central Command
      summary: List all Ships
      description: Here you can get all registered `Ship`s and their current state
      operationId: shipsList
      responses:
        200:
          description: Ships list
          content:
            application/vnd.deblasis.spacetrafficcontrol-v1+/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShipWithStats'
        400:
          description: Bad Request
      security:
        - bearerAuth: []
        
  /shipping-station/request-landing:
    post:
      tags:
      - Shipping Station
      summary: Requests for landing
      description: Are you a `Ship`? You need to request permission here if you want
        to land, you will be told where to go
      operationId: shipRequestLanding
      requestBody:
        description: Landing request
        content:
          application/vnd.deblasis.spacetrafficcontrol-v1+/json:
            schema:
              $ref: '#/components/schemas/RequestLandingRequest'
        required: true
      responses:
        200:
          description: Landing request instructions
          content:
            application/vnd.deblasis.spacetrafficcontrol-v1+/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/LandCommand"
                - $ref: "#/components/schemas/WaitCommand"
                discriminator:
                  propertyName: command
                  mapping:
                    land: "#/components/schemas/LandCommand"
                    wait: "#/components/schemas/WaitCommand"
        400:
          description: Bad Request
      security:
        - bearerAuth: []
      x-codegen-request-body-name: body
      
      
  /shipping-station/land:
    post:
      tags:
      - Shipping Station
      summary: Land here
      description: Are you a `Ship`? You need to register here first otherwise you
        won't be able to operate
      operationId: shipLand
      requestBody:
        description: 'Land request '
        content:
          application/vnd.deblasis.spacetrafficcontrol-v1+/json:
            schema:
              $ref: '#/components/schemas/LandRequest'
        required: true
      responses:
        200:
          description: Successfully registered
          content: {}
        400:
          description: Bad Request
          content: {}
      security:
        - bearerAuth: []
      x-codegen-request-body-name: body      
      
components:
  schemas:

    LoginRequest:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
        password:
          type: string
  
    SignupRequest:
      allOf:
        - $ref: '#/components/schemas/LoginRequest'
        - type: object
      required:
        - role
      properties:
       role:
        type: string
        enum:
        - Ship
        - Station
        - Command


              
          
          
    RegisterStationRequest:
      allOf:
        - $ref: '#/components/schemas/BaseStation'
        - type: object   
      type: object
      required:
        - capacity
      properties:
        capacity:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float
        docks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Dock'

                
    RegisterStationResponse:
      allOf:
        - $ref: '#/components/schemas/StationWithId'
        - type: object  
            
            
            
    StationsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/StationWithStats'
                
     
                
    RegisterShipRequest:
      type: object
      properties:
        weight:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float
                
    
    RequestLandingRequest:
      type: object
      properties:
        time:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: integer



    LandRequest:
      type: object
      properties:
        time:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int64

    LandCommand:
      type: object
      properties:
        command:
          type: string
          default: land
        dockingStation:
          type: string
          format: string
          
    WaitCommand:
      type: object
      properties:
        command:
          type: string
          default: wait
        duration:
          type: integer
          format: int64
   


    Dock:
      type: object
      required:
        - numDockingPorts
      properties:
        numDockingPorts:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int64
          
    DockWithId:
      allOf:
        - $ref: '#/components/schemas/Dock'
        - type: object
      required:
        - id
      properties:
        id:
          type: string      
          
          
          
    DockWithStats:      
      allOf:
        - $ref: '#/components/schemas/DockWithId'
        - type: object
      required:
        - id
        - occupied
        - weight
      properties:
        id:
          type: string      
        occupied:
          type: integer
          format: int64
        weight:
          type: number
          format: float          
          
    BaseStation:
      type: object
      required:
        - docks
      properties:
        docks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Dock' 
            
            
            
    StationWithId:
      allOf:
        - $ref: '#/components/schemas/BaseStation'
        - type: object
      required:
        - id
      properties:
        id:
          type: string     
        docks:
          minItems: 1
          items:
            $ref: '#/components/schemas/DockWithId'    
    
    StationWithStats:
      allOf:
        - $ref: '#/components/schemas/StationWithId'
        - type: object
      required:
        - id
        - capacity
        - usedCapacity
        - docks
      properties:
        capacity:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float   
        usedCapacity:
          type: number
          format: float    
          minimum: 0
          exclusiveMinimum: false
        docks:
          minItems: 1
          items:
            $ref: '#/components/schemas/DockWithStats'          
          


    BaseShip:
      type: object
      required:
        - weight
      properties:
        weight:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: float
                
                
    ShipWithStats:
      allOf:
        - $ref: '#/components/schemas/BaseShip'
        - type: object 
      required:
        - id
        - status
        - weight
      properties:
        id:
          type: string
        status:
          type: string
          description: ship status
          enum:
          - docked
          - in-flight
        weight:
          type: number
          format: float   
          
          
          
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        expires:
          type: integer
          format: int64
        
   
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  
    

